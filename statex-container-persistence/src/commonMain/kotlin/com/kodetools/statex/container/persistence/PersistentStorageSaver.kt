package com.kodetools.statex.container.persistence

import androidx.compose.runtime.Composable
import androidx.compose.runtime.currentCompositeKeyHash
import androidx.compose.runtime.remember
import androidx.compose.runtime.rememberCoroutineScope
import androidx.compose.runtime.saveable.Saver
import androidx.compose.runtime.saveable.SaverScope
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.launch
import kotlinx.serialization.KSerializer
import kotlinx.serialization.modules.EmptySerializersModule
import kotlinx.serialization.modules.SerializersModule
import kotlinx.serialization.serializer

@ExperimentalPersistentStateAPI
public class PersistentStorageSaver<T> @PublishedApi internal constructor(
    private val storage: PersistentStorage,
    private val key: String,
    private val defaultValue: () -> T,
    private val serializer: KSerializer<T>,
    private val serializersModule: SerializersModule,
    private val coroutineScope: CoroutineScope
) : Saver<T, String> {

    override fun restore(value: String): T? =
        storage.get(
            key = value, // TODO: Use the key property or the returned value? Does it matter?
            defaultValue = defaultValue(),
            serializersModule = serializersModule,
            serializer = serializer
        )

    override fun SaverScope.save(value: T): String {
        coroutineScope.launch {
            storage.set(
                key = key,
                value = value,
                serializersModule = serializersModule,
                serializer = serializer
            )
        }

        return key
    }
}

@ExperimentalPersistentStateAPI
public inline fun <reified T> persistentStorageSaver(
    key: String,
    storage: PersistentStorage = PersistentStorage.platformDefault(),
    serializersModule: SerializersModule = EmptySerializersModule(),
    serializer: KSerializer<T> = serializersModule.serializer(),
    coroutineScope: CoroutineScope,
    noinline defaultValue: () -> T
): Saver<T, out Any> = PersistentStorageSaver(
    storage = storage,
    key = key,
    defaultValue = defaultValue,
    serializer = serializer,
    serializersModule = serializersModule,
    coroutineScope = coroutineScope
)

@Composable
@ExperimentalPersistentStateAPI
public inline fun <reified T> rememberPersistentStorageSaver(
    vararg inputs: Any?,
    key: String? = null,
    storage: PersistentStorage = PersistentStorage.platformDefault(),
    serializersModule: SerializersModule = EmptySerializersModule(),
    serializer: KSerializer<T> = serializersModule.serializer(),
    coroutineScope: CoroutineScope = rememberCoroutineScope(),
    noinline defaultValue: () -> T
): Saver<T, out Any> {
    val compositeKey = currentCompositeKeyHash

    // key is the one provided by the user or the one generated by the compose runtime
    val finalKey = if (!key.isNullOrEmpty()) {
        key
    } else {
        compositeKey.toString(36)
    }

    return remember(*inputs, finalKey) {
        PersistentStorageSaver(
            storage = storage,
            key = finalKey,
            defaultValue = defaultValue,
            serializer = serializer,
            serializersModule = serializersModule,
            coroutineScope = coroutineScope
        )
    }
}
