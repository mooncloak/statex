package com.kodetools.statex.container.persistence

import androidx.compose.runtime.Composable
import androidx.compose.runtime.remember
import androidx.compose.runtime.rememberCoroutineScope
import androidx.compose.runtime.saveable.Saver
import androidx.compose.runtime.saveable.rememberSaveable
import kotlinx.coroutines.CoroutineScope
import kotlinx.serialization.KSerializer
import kotlinx.serialization.modules.EmptySerializersModule
import kotlinx.serialization.modules.SerializersModule
import kotlinx.serialization.serializer

/**
 * Remembers and returns the value in persisted storage. If the value is not available in the
 * persisted storage, then the [defaultValue] is returned. This is similar to the
 * [rememberSaveable] function, but instead of remembering the value between configuration changes,
 * this function persists the value so that it can be remembered across app reloads.
 *
 * > [!Note]
 * > This function uses [rememberSaveable] internally with a [PersistentStorageSaver]. Therefore,
 * > the values are persisted only when a configuration change occurs. To have a mutable state
 * > value that is persistable, use the [persistableStateContainerOf] function.
 *
 * @param [inputs] A set of inputs such that, when any of them have changed, will cause the state
 * to reset and init to be re-run.
 *
 * @param [key] An optional key to be used as a key for the saved value. If not provided we use the
 * automatically generated by the Compose runtime which is unique for the every exact code location
 * in the composition tree.
 *
 * @param [storage] The [PersistentStorage] for storing and receiving the value.
 *
 * @param [serializersModule] The [SerializersModule] which is used to obtain the default
 * [serializer] if none is provided. Defaults to [EmptySerializersModule]
 *
 * @param [serializer] The [KSerializer] that is used to encode the value for storage. Defaults to
 * [SerializersModule.serializer] value obtained from the provided [serializersModule].
 *
 * @param [coroutineScope] A [CoroutineScope] that is used to invoke the suspending
 * [PersistentStorage.set] function when storing the value.
 *
 * @param [defaultValue] A factory function to create the default value if there was no value
 * stored in the persistent [storage] with the associated [key].
 *
 * @see [remember] For a way to temporarily store values between compositions.
 *
 * @see [rememberSaveable] For a way to temporarily store values between configuration changes.
 *
 * @see [PersistentStorageSaver] for a [Saver] instance that uses the provided storage to save the
 * value.
 *
 * @see [persistableStateContainerOf] for a way to persist and retrieve state values on demand.
 */
@Composable
@ExperimentalPersistentStateAPI
public inline fun <reified T : Any> rememberPersistable(
    vararg inputs: Any?,
    key: String? = null,
    storage: PersistentStorage = PersistentStorage.platformDefault(),
    serializersModule: SerializersModule = EmptySerializersModule(),
    serializer: KSerializer<T> = serializersModule.serializer(),
    coroutineScope: CoroutineScope = rememberCoroutineScope(),
    noinline defaultValue: () -> T
): T {
    val saver = rememberPersistentStorageSaver(
        inputs = inputs,
        key = key,
        storage = storage,
        serializersModule = serializersModule,
        serializer = serializer,
        coroutineScope = coroutineScope,
        defaultValue = defaultValue
    )

    return rememberSaveable(
        inputs = inputs,
        key = key,
        saver = saver,
        init = defaultValue
    )
}
